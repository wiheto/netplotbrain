{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Netplotbrain Painlessly plot networks on brains. Benefits of netplotbrain Simple to use and lots of customation. Integration with TemplateFlow to ensure accurate images. Flexibility to create the image you want. Installation pip install netplotbrain Add the -U flag to upgrade from an earlier version. How to use? Look at the gallery or examples and the tutorial for more information. Get involved? Let us know if you would like to help!","title":"Netplotbrain"},{"location":"#netplotbrain","text":"Painlessly plot networks on brains.","title":"Netplotbrain"},{"location":"#benefits-of-netplotbrain","text":"Simple to use and lots of customation. Integration with TemplateFlow to ensure accurate images. Flexibility to create the image you want.","title":"Benefits of netplotbrain"},{"location":"#installation","text":"pip install netplotbrain Add the -U flag to upgrade from an earlier version.","title":"Installation"},{"location":"#how-to-use","text":"Look at the gallery or examples and the tutorial for more information.","title":"How to use?"},{"location":"#get-involved","text":"Let us know if you would like to help!","title":"Get involved?"},{"location":"api/","text":"API Full list of KWARGS Here is the full list of keyword arguments (KWARGS) that can be used along with netplotbrain.plot . Below they are split up in the following sections Node KWARGS - modify the nodes. Edge KWARGS - modify the edges. Template KWARGS - modify the template. Legend KWARGS - modify the figure legend. Arrow KWARGS - modify the direction arrows. Figure KWARGS - configure the figure as a whole. GIF KWARGS - when exporting as a gif. Text KWARGS - text related variables. Profile KWARGS - setting a style profile for all kwargs. NODE KWARGS Argument Type Description nodecmap str Matplotlib colormap for node coloring when nodecolor points to a dataframe. nodecolor matplotlib coloring Can be string (default 'black') that points to either a matplotlib color or a column in nodes or nodes_df. Alternatively a list of 3D/4D colors for each node. nodetype str Can be 'spheres', 'circles', or (if nodes is a nifti image) 'parcels'. nodealpha float Specify the transparency of the nodes nodecolumnnames list Node column names in node dataframe. 'auto' entails the columns are ['x', 'y', 'z'] (specifying coordinates) nodesizevminvmax str, list Scaling alternatives if nodesize is given. Alternatives: 'absolute' (default) 'minmax', or 2-tuple list of [min, max]. If minmax, node sizes are scaled between (0 and 1) * nodescale. If absolute, then the default values are used. Absolute can lead to problems with, for example, negative values. nodecolorvminvmax str, list Scales continuous colormap between certain values. Alternatives: 'minmax' (default), 'absmax', , or 2-tuple list of [min, max]. If minmax, colorbar starts at the smallest value to largest value. If absmax, then colorbar goes from -abs(max(value)) to abs(max(value)), ensuring 0 is in the middle. EDGE KWARGS Argument Type Description edges_df pd.DataFrame Allows for passing additional edge information if edges is np.array. Behaves like edges when input is dataframe. edgealpha float Transparency of edges (default: 1). edgecolumnames list Edge columns names in edge dataframe. Default is i and j (specifying nodes). edgecolor matplotlib coloring Can be string (default 'black') or list of 3D/4D colors for each edge. edgeweights str String that specifies column in edge dataframe that contains weights. If numpy array is edge input, can be True (default) to specify edge weights. edgehighlightbehaviour str Alternatives \"both\" or \"any\" or None. Governs edge dimming when highlightnodes is on. If both, then highlights only edges between highlighted nodes. If any, then only edges connecting any of the nodes are highlighted. edgewidthscale int, float Scale the width of all edges by a factor (default: 1). edgethresholddirection str can be \"absabove\", \"above\" (or \">\"), \"below\" (or \"<\") to indicate thresholding behaviour. If absabove, then the thresholding behaviour is np.abs(edges) > edgethreshold. edgethreshold float Edgeweight value to threshold edges. edgecolorvminvmax str, list Scales colormap between certain values. Alternatives: 'minmax' (default), 'absmax', or 2-tuple list of [min, max]. If minmax, colorbar starts at the smallest value to largest value. If absmax, then colorbar goes from -abs(max(value)) to abs(max(value)), ensuring 0 is in the middle. TEMPLATE KWARGS Argument Type Description templatecolor str If templatestyle=='surface' or 'filled', the color of template voxels templateedgethreshold float If templatestyle=='cloudy', can tweak the edges detection threshold. (Default: 0.7) templatealpha float Opacity of template voxels. templatevoxelsize int Resize voxels this size. Larger voxels = quicker. (Default: 2) surface_detection float The value used to detect the surface boundary (see argument level in marching_cubes). Some default choices are made for various templates surface_resolution int If templatestyle=='surface' controls the size of the triangles used in the surface reconstruction. (Default: 2). template_glass_compactness float Default 0.3. Compactness argument for skimage.segmentation.slic for segementation. Going lower will increase the detail. >1 will break the figure. temlate_glass_nsegments int n_segments argument for skimage.segementations.slic. Approx number of segments. 3 seems to work well. Increase if not enough detail, reduce if too much detail. template_glass_maxalpha float Default is 0.01. To make the smokey effect the alpha is relative to template intensity value This value sets the alpha scalar factor. The value will be the largest possible alpha value, where all other values scale between 0 and template_glass_max_alpha. LEGENDKWARGS Argument Type Description nodecolorlegend Bool If the colorlegend is plotted or not. Default True. nodesizelegend Bool If the sizelegend is plotted or not. Default True. nodecolorlegendstyle str Alternatives: auto (default), discrete, continuous. If the color legend should show the entire colormap or discrete colors. If auto, plots discrete if less than 8 unique values are detected. legendtickfontsize str, int Matplotlib fontsize for title in figure legends legendtitlefontsize str, int Matplotlib fontsize for ticks in figure legends ARROW KWARGS Argument Type Description arrowaxis list or str Adds axis arrows onto plot. Alternatives are: LR, AP, SI, 'all' arrowlength int, float Length of arrow arroworigin list x,y,z coordinates of arrowaxis. Note 0,0,0 is bottom left. FIGURE KWARGS Argument Type Description ax matplotlib 3D ax fig = plt.figure(). ax = fig.add_subplot(111, projection='3d'). netplotbrain.plot(ax, ...) fig matplotlib figure savename str Save path for figure. If string ends with .png or .svg it will one save this figure. if the path ends with anything else, it will save both a .png and .svg figure. Default: None and nothing is saved. figdpi int 300 Default. R esolution of figure when saving png files. GIF KWARGS Argument Type Description gif bool If true, saves views as a gif. gifduration int Gif duration in milliseconds gifloop int How many times to loop figure. 0 (default) entails infinite loop. TEXT KWARGS Argument Type Description font str font for all text in figure. fontcolor str, list, tuple font color for all text in figure titlefontsize str Size of title font (default: medium). See matplotlib \"fontsize\" titleloc str, Location of title (default: center). See matplotlib \"loc\" titleweight str Font weight of title (default: regular). See matplotlib \"fontweight\" PROFILE KWARGS Argument Type Description profile str path or name of file in netplotbrain/profiles/ .json, specifies default kwargs. Default points to netplotbrain/profiles/default.json","title":"Api"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#full-list-of-kwargs","text":"Here is the full list of keyword arguments (KWARGS) that can be used along with netplotbrain.plot . Below they are split up in the following sections Node KWARGS - modify the nodes. Edge KWARGS - modify the edges. Template KWARGS - modify the template. Legend KWARGS - modify the figure legend. Arrow KWARGS - modify the direction arrows. Figure KWARGS - configure the figure as a whole. GIF KWARGS - when exporting as a gif. Text KWARGS - text related variables. Profile KWARGS - setting a style profile for all kwargs.","title":"Full list of KWARGS"},{"location":"api/#node-kwargs","text":"Argument Type Description nodecmap str Matplotlib colormap for node coloring when nodecolor points to a dataframe. nodecolor matplotlib coloring Can be string (default 'black') that points to either a matplotlib color or a column in nodes or nodes_df. Alternatively a list of 3D/4D colors for each node. nodetype str Can be 'spheres', 'circles', or (if nodes is a nifti image) 'parcels'. nodealpha float Specify the transparency of the nodes nodecolumnnames list Node column names in node dataframe. 'auto' entails the columns are ['x', 'y', 'z'] (specifying coordinates) nodesizevminvmax str, list Scaling alternatives if nodesize is given. Alternatives: 'absolute' (default) 'minmax', or 2-tuple list of [min, max]. If minmax, node sizes are scaled between (0 and 1) * nodescale. If absolute, then the default values are used. Absolute can lead to problems with, for example, negative values. nodecolorvminvmax str, list Scales continuous colormap between certain values. Alternatives: 'minmax' (default), 'absmax', , or 2-tuple list of [min, max]. If minmax, colorbar starts at the smallest value to largest value. If absmax, then colorbar goes from -abs(max(value)) to abs(max(value)), ensuring 0 is in the middle.","title":"NODE KWARGS"},{"location":"api/#edge-kwargs","text":"Argument Type Description edges_df pd.DataFrame Allows for passing additional edge information if edges is np.array. Behaves like edges when input is dataframe. edgealpha float Transparency of edges (default: 1). edgecolumnames list Edge columns names in edge dataframe. Default is i and j (specifying nodes). edgecolor matplotlib coloring Can be string (default 'black') or list of 3D/4D colors for each edge. edgeweights str String that specifies column in edge dataframe that contains weights. If numpy array is edge input, can be True (default) to specify edge weights. edgehighlightbehaviour str Alternatives \"both\" or \"any\" or None. Governs edge dimming when highlightnodes is on. If both, then highlights only edges between highlighted nodes. If any, then only edges connecting any of the nodes are highlighted. edgewidthscale int, float Scale the width of all edges by a factor (default: 1). edgethresholddirection str can be \"absabove\", \"above\" (or \">\"), \"below\" (or \"<\") to indicate thresholding behaviour. If absabove, then the thresholding behaviour is np.abs(edges) > edgethreshold. edgethreshold float Edgeweight value to threshold edges. edgecolorvminvmax str, list Scales colormap between certain values. Alternatives: 'minmax' (default), 'absmax', or 2-tuple list of [min, max]. If minmax, colorbar starts at the smallest value to largest value. If absmax, then colorbar goes from -abs(max(value)) to abs(max(value)), ensuring 0 is in the middle.","title":"EDGE KWARGS"},{"location":"api/#template-kwargs","text":"Argument Type Description templatecolor str If templatestyle=='surface' or 'filled', the color of template voxels templateedgethreshold float If templatestyle=='cloudy', can tweak the edges detection threshold. (Default: 0.7) templatealpha float Opacity of template voxels. templatevoxelsize int Resize voxels this size. Larger voxels = quicker. (Default: 2) surface_detection float The value used to detect the surface boundary (see argument level in marching_cubes). Some default choices are made for various templates surface_resolution int If templatestyle=='surface' controls the size of the triangles used in the surface reconstruction. (Default: 2). template_glass_compactness float Default 0.3. Compactness argument for skimage.segmentation.slic for segementation. Going lower will increase the detail. >1 will break the figure. temlate_glass_nsegments int n_segments argument for skimage.segementations.slic. Approx number of segments. 3 seems to work well. Increase if not enough detail, reduce if too much detail. template_glass_maxalpha float Default is 0.01. To make the smokey effect the alpha is relative to template intensity value This value sets the alpha scalar factor. The value will be the largest possible alpha value, where all other values scale between 0 and template_glass_max_alpha.","title":"TEMPLATE KWARGS"},{"location":"api/#legendkwargs","text":"Argument Type Description nodecolorlegend Bool If the colorlegend is plotted or not. Default True. nodesizelegend Bool If the sizelegend is plotted or not. Default True. nodecolorlegendstyle str Alternatives: auto (default), discrete, continuous. If the color legend should show the entire colormap or discrete colors. If auto, plots discrete if less than 8 unique values are detected. legendtickfontsize str, int Matplotlib fontsize for title in figure legends legendtitlefontsize str, int Matplotlib fontsize for ticks in figure legends","title":"LEGENDKWARGS"},{"location":"api/#arrow-kwargs","text":"Argument Type Description arrowaxis list or str Adds axis arrows onto plot. Alternatives are: LR, AP, SI, 'all' arrowlength int, float Length of arrow arroworigin list x,y,z coordinates of arrowaxis. Note 0,0,0 is bottom left.","title":"ARROW KWARGS"},{"location":"api/#figure-kwargs","text":"Argument Type Description ax matplotlib 3D ax fig = plt.figure(). ax = fig.add_subplot(111, projection='3d'). netplotbrain.plot(ax, ...) fig matplotlib figure savename str Save path for figure. If string ends with .png or .svg it will one save this figure. if the path ends with anything else, it will save both a .png and .svg figure. Default: None and nothing is saved. figdpi int 300 Default. R esolution of figure when saving png files.","title":"FIGURE KWARGS"},{"location":"api/#gif-kwargs","text":"Argument Type Description gif bool If true, saves views as a gif. gifduration int Gif duration in milliseconds gifloop int How many times to loop figure. 0 (default) entails infinite loop.","title":"GIF KWARGS"},{"location":"api/#text-kwargs","text":"Argument Type Description font str font for all text in figure. fontcolor str, list, tuple font color for all text in figure titlefontsize str Size of title font (default: medium). See matplotlib \"fontsize\" titleloc str, Location of title (default: center). See matplotlib \"loc\" titleweight str Font weight of title (default: regular). See matplotlib \"fontweight\"","title":"TEXT KWARGS"},{"location":"api/#profile-kwargs","text":"Argument Type Description profile str path or name of file in netplotbrain/profiles/ .json, specifies default kwargs. Default points to netplotbrain/profiles/default.json","title":"PROFILE KWARGS"},{"location":"cite/","text":"Citation If using netplotbrain in an academic article, please cite the package and the libraries it relies on. Suggestion of text in methods section: Methods Network plots were generated using netplotbrain (Thompson & Fanton 2021), which utilizes templateflow (Ciric et al 2021), matplotlib (Hunter 2007), pandas (McKinney 2011), numpy (Harris et al 2020), scipy (Virtanen et al 2020), nibabel (Brett et al 2020), and scikit-image (van der Walt et al 2014). References Brett, Matthew, Markiewicz, Christopher J., Hanke, Michael, C\u00f4t\u00e9, Marc-Alexandre, Cipollini, Ben, McCarthy, Paul, et al (2020, November 28). nipy/nibabel: 3.2.1 (Version 3.2.1). Zenodo. http://doi.org/10.5281/zenodo.4295521 Ciric, R., Lorenz, R., Thompson, W. H., Goncalves, M., MacNicol, E., Markiewicz, C., ... & Esteban, O. (2021). TemplateFlow: a community archive of imaging templates and atlases for improved consistency in neuroimaging. bioRxiv. Harris, C. R., Millman, K. J., van der Walt, S. J., Gommers, R., Virtanen, P., Cournapeau, D., ... & Oliphant, T. E. (2020). Array programming with NumPy. Nature, 585(7825), 357-362. Hunter, J. D. (2007). Matplotlib: A 2D graphics environment. IEEE Annals of the History of Computing, 9(03), 90-95. McKinney, W. (2011). pandas: a foundational Python library for data analysis and statistics. Python for High Performance and Scientific Computing, 14(9), 1-9. Thompson WH, & Fanton S. (2021, 10 March). wiheto/netplotbrain:. Zenodo. doi :10.5281/zenodo.4593837 Van der Walt, S., Sch\u00f6nberger, J. L., Nunez-Iglesias, J., Boulogne, F., Warner, J. D., Yager, N., ... & Yu, T. (2014). scikit-image: image processing in Python. PeerJ, 2, e453. Virtanen, P., Gommers, R., Oliphant, T. E., Haberland, M., Reddy, T., Cournapeau, D., ... & van Mulbregt, P. (2020). SciPy 1.0: fundamental algorithms for scientific computing in Python. Nature methods, 17(3), 261-272.","title":"Citation"},{"location":"cite/#citation","text":"If using netplotbrain in an academic article, please cite the package and the libraries it relies on. Suggestion of text in methods section:","title":"Citation"},{"location":"cite/#methods","text":"Network plots were generated using netplotbrain (Thompson & Fanton 2021), which utilizes templateflow (Ciric et al 2021), matplotlib (Hunter 2007), pandas (McKinney 2011), numpy (Harris et al 2020), scipy (Virtanen et al 2020), nibabel (Brett et al 2020), and scikit-image (van der Walt et al 2014).","title":"Methods"},{"location":"cite/#references","text":"Brett, Matthew, Markiewicz, Christopher J., Hanke, Michael, C\u00f4t\u00e9, Marc-Alexandre, Cipollini, Ben, McCarthy, Paul, et al (2020, November 28). nipy/nibabel: 3.2.1 (Version 3.2.1). Zenodo. http://doi.org/10.5281/zenodo.4295521 Ciric, R., Lorenz, R., Thompson, W. H., Goncalves, M., MacNicol, E., Markiewicz, C., ... & Esteban, O. (2021). TemplateFlow: a community archive of imaging templates and atlases for improved consistency in neuroimaging. bioRxiv. Harris, C. R., Millman, K. J., van der Walt, S. J., Gommers, R., Virtanen, P., Cournapeau, D., ... & Oliphant, T. E. (2020). Array programming with NumPy. Nature, 585(7825), 357-362. Hunter, J. D. (2007). Matplotlib: A 2D graphics environment. IEEE Annals of the History of Computing, 9(03), 90-95. McKinney, W. (2011). pandas: a foundational Python library for data analysis and statistics. Python for High Performance and Scientific Computing, 14(9), 1-9. Thompson WH, & Fanton S. (2021, 10 March). wiheto/netplotbrain:. Zenodo. doi :10.5281/zenodo.4593837 Van der Walt, S., Sch\u00f6nberger, J. L., Nunez-Iglesias, J., Boulogne, F., Warner, J. D., Yager, N., ... & Yu, T. (2014). scikit-image: image processing in Python. PeerJ, 2, e453. Virtanen, P., Gommers, R., Oliphant, T. E., Haberland, M., Reddy, T., Cournapeau, D., ... & van Mulbregt, P. (2020). SciPy 1.0: fundamental algorithms for scientific computing in Python. Nature methods, 17(3), 261-272.","title":"References"},{"location":"gallary/","text":"Gallery Simple Figures A single view Source Code Three images Dual row figures Source Code Integrations Network based statistics (via bctpy) integration Source Code TemplateFLow Atlases MNIInfant Source Code WHS (rat) Source Code","title":"Gallery"},{"location":"gallary/#gallery","text":"","title":"Gallery"},{"location":"gallary/#simple-figures","text":"","title":"Simple Figures"},{"location":"gallary/#a-single-view","text":"Source Code","title":"A single view"},{"location":"gallary/#three-images","text":"","title":"Three images"},{"location":"gallary/#dual-row-figures","text":"Source Code","title":"Dual row figures"},{"location":"gallary/#integrations","text":"","title":"Integrations"},{"location":"gallary/#network-based-statistics-via-bctpy-integration","text":"Source Code","title":"Network based statistics (via bctpy) integration"},{"location":"gallary/#templateflow-atlases","text":"","title":"TemplateFLow Atlases"},{"location":"gallary/#mniinfant","text":"Source Code","title":"MNIInfant"},{"location":"gallary/#whs-rat","text":"Source Code","title":"WHS (rat)"},{"location":"tutorial/","text":"Tutorial NB: This is under construction/being updated In this section there are files on different components of netplotbrain. The tutorial is split into two section. Section 1: the basics There are three components: the nodes, the edges, the template Each component and their properties are plotted independently of each other. 1.1 Specifying Nodes There are two ways you can specify the coordinates of the nodes. A pandas dataframe (Argument: nodes) To plot the nodes, the pandas dataframe must contain three columns that refer to the 3D coordinates of each node. By default, these columns are called x , y , z by they can be manually specified by called the colnames keyword argument. Thus, the dataframe will begin something like this: x y z 40 50 20 -10 40 30 If we create this dataframe with the two nodes above, we will just plot two circles onto the figure. # Import packages import netplotbrain import pandas as pd # Define the nodes nodes_df = pd.DataFrame({'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30]}) # Call netplotbrain to plot netplotbrain.plot(nodes=nodes_df, arrowaxis=None) [1] 2022-06-21 10:30:17 ( 1.61s ) python3 ( 1.63s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [7], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Here we just see five dots of the same size, but we have nodes in the 3D space. The second option arrowaxis turns of some default directional arrows which do not look good in this small-scale example without a background template. The other columns in the dataframe can refer to node related properties (e.g. size and colour). In such cases the dataframe may begin something like this: These just become other columns in the dataframe (called node_df). x y z communities degree_centrality 40 50 20 1 0.8 -10 40 30 1 0.4 Then the columns nodecolor=communities and nodesize=degree_centrality be specified and each node will automatically be coloured or scaled by the specified column. For example: # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, nodesize='degree_centrality', nodecolor='communities', arrowaxis=None, nodescale=100) [2] 2022-06-21 10:30:18 ( 52.4ms ) python3 ( 1.68s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [8], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Will just plot the nodes, with each node having the size of the degree_centrality column and a colour of the communities column. Here we have also added nodescale which just linearly scales all nodes by that factor. We also see that when specifying nodesize and nodecolor that legends automatically appear. At the moment we just have some circles floating in 3D space. Let us add some more information about this network. An atlas from templateflow or local file (Argument: nodes) One of the key benefits with netplotbrain is that it interacts with TemplateFlow, which is a collection of brain templates and atlases. The atlases can be used as nodes. If you specify the key/value pairs of an atlas on templateflow in a dictionary, the atlas will be automatically downloaded. For example, the following will get the 400 Parcels version from the Schaefer atlas. # import packages import netplotbrain # Define the atlas by key value words of TemplateFlow name nodes={'template': 'MNI152NLin2009cAsym', 'atlas': 'Schaefer2018', ## Template (nifti or string) netplotbrain.plot( nodes=nodes, arrowaxis=None) [3] 2022-06-21 10:30:19 ( 3.31ms ) python3 ( 1.68s ) SyntaxError: unexpected EOF while parsing (2192184692.py, line 9) See templateflow.org for more atlases. If the template argument is specified in netplotbrain.plot , then the template argument does not need to be included in the nodes dictionary. Since the nifti image consists of parcels (i.e. regions) of the brain instead of circles placed throughout the brain, it is possible to specify that you would rather visualize the parcels over the circles with a single argument nodetype . # import packages import netplotbrain # Define the atlas by key value words of TemplateFlow name nodes={'template': 'MNI152NLin2009cAsym', 'atlas': 'Schaefer2018', 'desc': '400Parcels7Networks', 'resolution': 1} # Plot netplotbrain.plot( nodes=nodes, arrowaxis=None, nodetype='parcel') [4] 2022-06-21 10:30:19 ( 48.8ms ) python3 ( 1.73s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [10], in <cell line: 2>() 1 # import packages ----> 2 import netplotbrain 3 # Define the atlas by key value words of TemplateFlow name 4 nodes={'template': 'MNI152NLin2009cAsym', 5 'atlas': 'Schaefer2018', 6 'desc': '400Parcels7Networks', 7 'resolution': 1} File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf 1.2 Specifying Edges The edges between the nodes can be passed to netplotbrain as either a numpy array (NxN adjacency matrix) or a pandas dataframe (edgelist) with the default columns 'i', 'j', and 'weight' (optional). An example: j j weight 0 1 0.8 1 2 0.5 i and j reference the indices of our nodes defined above. You can use the argument edgecol to specify different column names. Let us continue to add to our figure above: # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [5] 2022-06-21 10:30:19 ( 52.2ms ) python3 ( 1.78s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [11], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf If you have the column weight in your edge dataframe, these will be automatically plotted as well. This can be turn off by setting edgeweights to False. Also, a list of length 3 can be given to edgecol that specifies alternative names for ['i', 'j', 'weights']. # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [6] 2022-06-21 10:30:19 ( 50.6ms ) python3 ( 1.83s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [12], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Finally, you can specify a number matrix instead of a pandas dataframe. # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [7] 2022-06-21 10:30:19 ( 49.0ms ) python3 ( 1.88s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [13], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf 1.3 Specifying Templates Template (nifti or string) For the template you can supply any nifti file. You can also provide the template name for any template on templateflow.org. The T1w brain mask will then automatically downloaded (if not already present on your computer) and used as the background. Netplotbrain can render slightly different templates Template Styles There are currently three background styles: \"surface\", \"filled\" and \"cloudy\". The surface quickly renders a surface from the voxels. Additional arguments can be provided in order to the resolution of the surface. The filled style plots the template's brain mask as voxels. This can be slightly RAM consuming. The cloudy style tries to identify the outline of the mask and plots points along the edges. The cloudy style is quick, but the edge detection is run relative to the specified initial view of the plot. For templates, you can change the voxelsize of the template. Larger voxels means the plot will be generated quicker. Section 2: Visualization Here we will learn about two Views The view is the angle which the brain is viewed from in the plot. You can specify it as a string: Argument View 'L' Left 'R' Right 'A' Anterior 'P' Posterior 'S' Superior 'I' Inferior Sequences of views are possible. So, setting view = 'LSR' will generate 3 subplots with left, superior, and right views If you specify a list (e.g. ['LR', 'AP'] ) then two different rows will be generated. The first from left to right. The second from anterior to posterior. import netplotbrain netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['LSR', 'AIP']) plt.show() [8] 2022-06-21 10:30:19 ( 125ms ) python3 ( 2.01s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [14], in <cell line: 1>() ----> 1 import netplotbrain 2 netplotbrain.plot(template='MNI152NLin2009cAsym', 3 templatestyle='surface', 4 view=['LSR', 'AIP']) 5 plt.show() File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf You can also specify the specific rotation (tuple): (xy-rotation, xz-rotation) in degrees. The R view is (0, 0) Rotated sequences with frames You can also generate a sequence of rotated images. If the view is two letters, (e.g. 'LR' ), then a sequence will be generated from the L-view to R-view. The parameter frames will control how many images are generated. Images will then be displayed along a single row. import netplotbrain netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['AP'], frames=5) [9] 2022-06-21 10:30:19 ( 49.3ms ) python3 ( 2.06s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [15], in <cell line: 1>() ----> 1 import netplotbrain 2 netplotbrain.plot(template='MNI152NLin2009cAsym', 3 templatestyle='surface', 4 view=['AP'], 5 frames=5) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Plot single hemispheres The hemisphere argument allows you to plot either the left of right hemisphere. Doing this entails all nodes on the left and right hemisphere's automatically get netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['SSS'], hemisphere=['L', 'R', ''], nodes=nodesdf, nodesize='centrality_measure1', edges=edges) [10] 2022-06-21 10:30:19 ( 10.7ms ) python3 ( 2.07s ) NameError: name 'netplotbrain' is not defined NameError Traceback (most recent call last) Input In [16], in <cell line: 1>() ----> 1 netplotbrain.plot(template='MNI152NLin2009cAsym', 2 templatestyle='surface', 3 view=['SSS'], 4 hemisphere=['L', 'R', ''], 5 nodes=nodesdf, 6 nodesize='centrality_measure1', 7 edges=edges)","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"NB: This is under construction/being updated In this section there are files on different components of netplotbrain. The tutorial is split into two section.","title":"Tutorial"},{"location":"tutorial/#section-1-the-basics","text":"There are three components: the nodes, the edges, the template Each component and their properties are plotted independently of each other.","title":"Section 1: the basics"},{"location":"tutorial/#11-specifying-nodes","text":"There are two ways you can specify the coordinates of the nodes.","title":"1.1 Specifying Nodes"},{"location":"tutorial/#a-pandas-dataframe-argument-nodes","text":"To plot the nodes, the pandas dataframe must contain three columns that refer to the 3D coordinates of each node. By default, these columns are called x , y , z by they can be manually specified by called the colnames keyword argument. Thus, the dataframe will begin something like this: x y z 40 50 20 -10 40 30 If we create this dataframe with the two nodes above, we will just plot two circles onto the figure. # Import packages import netplotbrain import pandas as pd # Define the nodes nodes_df = pd.DataFrame({'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30]}) # Call netplotbrain to plot netplotbrain.plot(nodes=nodes_df, arrowaxis=None) [1] 2022-06-21 10:30:17 ( 1.61s ) python3 ( 1.63s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [7], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Here we just see five dots of the same size, but we have nodes in the 3D space. The second option arrowaxis turns of some default directional arrows which do not look good in this small-scale example without a background template. The other columns in the dataframe can refer to node related properties (e.g. size and colour). In such cases the dataframe may begin something like this: These just become other columns in the dataframe (called node_df). x y z communities degree_centrality 40 50 20 1 0.8 -10 40 30 1 0.4 Then the columns nodecolor=communities and nodesize=degree_centrality be specified and each node will automatically be coloured or scaled by the specified column. For example: # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, nodesize='degree_centrality', nodecolor='communities', arrowaxis=None, nodescale=100) [2] 2022-06-21 10:30:18 ( 52.4ms ) python3 ( 1.68s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [8], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Will just plot the nodes, with each node having the size of the degree_centrality column and a colour of the communities column. Here we have also added nodescale which just linearly scales all nodes by that factor. We also see that when specifying nodesize and nodecolor that legends automatically appear. At the moment we just have some circles floating in 3D space. Let us add some more information about this network.","title":"A pandas dataframe (Argument: nodes)"},{"location":"tutorial/#an-atlas-from-templateflow-or-local-file-argument-nodes","text":"One of the key benefits with netplotbrain is that it interacts with TemplateFlow, which is a collection of brain templates and atlases. The atlases can be used as nodes. If you specify the key/value pairs of an atlas on templateflow in a dictionary, the atlas will be automatically downloaded. For example, the following will get the 400 Parcels version from the Schaefer atlas. # import packages import netplotbrain # Define the atlas by key value words of TemplateFlow name nodes={'template': 'MNI152NLin2009cAsym', 'atlas': 'Schaefer2018', ## Template (nifti or string) netplotbrain.plot( nodes=nodes, arrowaxis=None) [3] 2022-06-21 10:30:19 ( 3.31ms ) python3 ( 1.68s ) SyntaxError: unexpected EOF while parsing (2192184692.py, line 9) See templateflow.org for more atlases. If the template argument is specified in netplotbrain.plot , then the template argument does not need to be included in the nodes dictionary. Since the nifti image consists of parcels (i.e. regions) of the brain instead of circles placed throughout the brain, it is possible to specify that you would rather visualize the parcels over the circles with a single argument nodetype . # import packages import netplotbrain # Define the atlas by key value words of TemplateFlow name nodes={'template': 'MNI152NLin2009cAsym', 'atlas': 'Schaefer2018', 'desc': '400Parcels7Networks', 'resolution': 1} # Plot netplotbrain.plot( nodes=nodes, arrowaxis=None, nodetype='parcel') [4] 2022-06-21 10:30:19 ( 48.8ms ) python3 ( 1.73s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [10], in <cell line: 2>() 1 # import packages ----> 2 import netplotbrain 3 # Define the atlas by key value words of TemplateFlow name 4 nodes={'template': 'MNI152NLin2009cAsym', 5 'atlas': 'Schaefer2018', 6 'desc': '400Parcels7Networks', 7 'resolution': 1} File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"An atlas from templateflow or local file (Argument: nodes)"},{"location":"tutorial/#12-specifying-edges","text":"The edges between the nodes can be passed to netplotbrain as either a numpy array (NxN adjacency matrix) or a pandas dataframe (edgelist) with the default columns 'i', 'j', and 'weight' (optional). An example: j j weight 0 1 0.8 1 2 0.5 i and j reference the indices of our nodes defined above. You can use the argument edgecol to specify different column names. Let us continue to add to our figure above: # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [5] 2022-06-21 10:30:19 ( 52.2ms ) python3 ( 1.78s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [11], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf If you have the column weight in your edge dataframe, these will be automatically plotted as well. This can be turn off by setting edgeweights to False. Also, a list of length 3 can be given to edgecol that specifies alternative names for ['i', 'j', 'weights']. # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [6] 2022-06-21 10:30:19 ( 50.6ms ) python3 ( 1.83s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [12], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf Finally, you can specify a number matrix instead of a pandas dataframe. # Import packages import netplotbrain import pandas as pd # Define the nodes (5 example nodes) nodes_df = pd.DataFrame(data={'x': [40, 10, 30, -15, -25], 'y': [50, 40, -10, -20, 20], 'z': [20, 30, -10, -15, 30], 'communities': [1, 1, 1, 2, 2], 'degree_centrality': [1, 1, 0.2, 0.8, 0.4]}) # Define the edges edges_df = pd.DataFrame(data={'i': [0, 0, 1, 1, 3], 'j': [1, 2, 2, 3, 4]}) # Call netplotbrain to plot netplotbrain.plot( nodes=nodes_df, edges=edges_df, nodecolor='communities', arrowaxis=None, nodescale=150) [7] 2022-06-21 10:30:19 ( 49.0ms ) python3 ( 1.88s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [13], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 4 # Define the nodes (5 example nodes) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"1.2 Specifying Edges"},{"location":"tutorial/#13-specifying-templates","text":"","title":"1.3 Specifying Templates"},{"location":"tutorial/#template-nifti-or-string","text":"For the template you can supply any nifti file. You can also provide the template name for any template on templateflow.org. The T1w brain mask will then automatically downloaded (if not already present on your computer) and used as the background. Netplotbrain can render slightly different templates","title":"Template (nifti or string)"},{"location":"tutorial/#template-styles","text":"There are currently three background styles: \"surface\", \"filled\" and \"cloudy\". The surface quickly renders a surface from the voxels. Additional arguments can be provided in order to the resolution of the surface. The filled style plots the template's brain mask as voxels. This can be slightly RAM consuming. The cloudy style tries to identify the outline of the mask and plots points along the edges. The cloudy style is quick, but the edge detection is run relative to the specified initial view of the plot. For templates, you can change the voxelsize of the template. Larger voxels means the plot will be generated quicker.","title":"Template Styles"},{"location":"tutorial/#section-2-visualization","text":"Here we will learn about two","title":"Section 2: Visualization"},{"location":"tutorial/#views","text":"The view is the angle which the brain is viewed from in the plot. You can specify it as a string: Argument View 'L' Left 'R' Right 'A' Anterior 'P' Posterior 'S' Superior 'I' Inferior Sequences of views are possible. So, setting view = 'LSR' will generate 3 subplots with left, superior, and right views If you specify a list (e.g. ['LR', 'AP'] ) then two different rows will be generated. The first from left to right. The second from anterior to posterior. import netplotbrain netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['LSR', 'AIP']) plt.show() [8] 2022-06-21 10:30:19 ( 125ms ) python3 ( 2.01s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [14], in <cell line: 1>() ----> 1 import netplotbrain 2 netplotbrain.plot(template='MNI152NLin2009cAsym', 3 templatestyle='surface', 4 view=['LSR', 'AIP']) 5 plt.show() File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf You can also specify the specific rotation (tuple): (xy-rotation, xz-rotation) in degrees. The R view is (0, 0)","title":"Views"},{"location":"tutorial/#rotated-sequences-with-frames","text":"You can also generate a sequence of rotated images. If the view is two letters, (e.g. 'LR' ), then a sequence will be generated from the L-view to R-view. The parameter frames will control how many images are generated. Images will then be displayed along a single row. import netplotbrain netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['AP'], frames=5) [9] 2022-06-21 10:30:19 ( 49.3ms ) python3 ( 2.06s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [15], in <cell line: 1>() ----> 1 import netplotbrain 2 netplotbrain.plot(template='MNI152NLin2009cAsym', 3 templatestyle='surface', 4 view=['AP'], 5 frames=5) File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Rotated sequences with frames"},{"location":"tutorial/#plot-single-hemispheres","text":"The hemisphere argument allows you to plot either the left of right hemisphere. Doing this entails all nodes on the left and right hemisphere's automatically get netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view=['SSS'], hemisphere=['L', 'R', ''], nodes=nodesdf, nodesize='centrality_measure1', edges=edges) [10] 2022-06-21 10:30:19 ( 10.7ms ) python3 ( 2.07s ) NameError: name 'netplotbrain' is not defined NameError Traceback (most recent call last) Input In [16], in <cell line: 1>() ----> 1 netplotbrain.plot(template='MNI152NLin2009cAsym', 2 templatestyle='surface', 3 view=['SSS'], 4 hemisphere=['L', 'R', ''], 5 nodes=nodesdf, 6 nodesize='centrality_measure1', 7 edges=edges)","title":"Plot single hemispheres"},{"location":"gallary/infant/","text":"Template from TemplateFlow: MNIInfant # Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Rescale example node data to fit template nodes_inf = nodes.copy() nodes_inf['x'] = nodes_inf['x'] / 1.25 nodes_inf['y'] = nodes_inf['y'] / 1.25 nodes_inf['z'] = nodes_inf['z'] / 1.25 # Plot figure netplotbrain.plot(template='MNIInfant', templatestyle='surface', title='Infant template', view='LSR', nodes=nodes_inf, nodesize='centrality_measure1', nodecolor='community', nodescale=80, edges=edges, templatevoxsize=5) [1] 2022-06-21 10:30:19 ( 53.8ms ) python3 ( 2.13s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [18], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Infant"},{"location":"gallary/infant/#template-from-templateflow-mniinfant","text":"# Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Rescale example node data to fit template nodes_inf = nodes.copy() nodes_inf['x'] = nodes_inf['x'] / 1.25 nodes_inf['y'] = nodes_inf['y'] / 1.25 nodes_inf['z'] = nodes_inf['z'] / 1.25 # Plot figure netplotbrain.plot(template='MNIInfant', templatestyle='surface', title='Infant template', view='LSR', nodes=nodes_inf, nodesize='centrality_measure1', nodecolor='community', nodescale=80, edges=edges, templatevoxsize=5) [1] 2022-06-21 10:30:19 ( 53.8ms ) python3 ( 2.13s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [18], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Template from TemplateFlow: MNIInfant"},{"location":"gallary/nbs/","text":"Plotting significant results from network based statistics Netplotbrain aims to try and integrate with other tools, minimizing the work needed. For this we are going to use bctpy's implementation of network based statistics. import bct import numpy as np import matplotlib.pyplot as plt import netplotbrain [1] 2022-06-21 10:30:19 ( 12.8ms ) python3 ( 2.14s ) ModuleNotFoundError: No module named 'bct' ModuleNotFoundError Traceback (most recent call last) Input In [20], in <cell line: 1>() ----> 1 import bct 2 import numpy as np 3 import matplotlib.pyplot as plt Generating the data To run NBS statistics we need connectivity matrices for multiple subjects. The data we will need is a N x N x S array for two separate groups, where N is the number of nodes and S is the number of subjects. In this subsection we will create dummy data to simulate the point. Skip to the next subsection if you just want to see how netplotbrain integrates with NBS statistics. We are going to create connectivity matrices with 100 nodes for 50 subjects. The 100 nodes will be split into 6 communities of varying sizes. Edge weights will be sampled from a normal distribution with the standard deviation set to 0.25. The mean of the normal distribution for each edge varies. For between-community edges the mean is set to 0. For within community edges each community is set to a different value. This value will differ between the two groups. def generate_group_cm(nodes, subjects, community_size, community_str, scale=0.25, seed=2022): \"\"\" Quick way to simulate group differences for visualization purposes. Input ----- nodes : int number of nodes subjects : int number of subjects community_size : list list of number of nodes in each community community_str : list list of mean str for within community connections scale : float scale (STD) of normal distribution. \"\"\" np.random.seed(seed) mu = np.zeros([nodes, nodes, 1]) np.fill_diagonal(mu[:, :, 0], 1) ci = 0 for i, c in enumerate(community_size): mu[ci:ci+c, ci:ci+c, :] = community_str[i] ci += c # Simulate data g = np.random.normal(mu, scale, size=[nodes, nodes, subjects]) # Force to be symmetric ind_i, ind_j = np.triu_indices(g.shape[0], k=1) g[ind_j, ind_i] = g[ind_i, ind_j] return g # Specify variable for generating data nodes = 100 subjects_per_group = 50 community_size = [13, 7, 35, 15, 20, 5] g1_community_str = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1] g2_community_str = [0.17, 0.7, 0.13, 0.1, 0.15, 0.6] g1 = generate_group_cm(nodes, subjects_per_group, community_size, g1_community_str) g2 = generate_group_cm(nodes, subjects_per_group, community_size, g2_community_str) [2] 2022-06-21 10:30:19 ( 23.4ms ) python3 ( 2.16s ) NameError: name 'np' is not defined NameError Traceback (most recent call last) Input In [21], in <cell line: 41>() 38 g1_community_str = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1] 39 g2_community_str = [0.17, 0.7, 0.13, 0.1, 0.15, 0.6] ---> 41 g1 = generate_group_cm(nodes, subjects_per_group, community_size, g1_community_str) 42 g2 = generate_group_cm(nodes, subjects_per_group, community_size, g2_community_str) Input In [21], in generate_group_cm(nodes, subjects, community_size, community_str, scale, seed) 1 def generate_group_cm(nodes, subjects, community_size, community_str, scale=0.25, seed=2022): 2 \"\"\" 3 Quick way to simulate group differences for visualization purposes. 4 (...) 16 scale (STD) of normal distribution. 17 \"\"\" ---> 18 np.random.seed(seed) 19 mu = np.zeros([nodes, nodes, 1]) 20 np.fill_diagonal(mu[:, :, 0], 1) Running NBS statistics From the generated data. Using the NBS implementation from bctpy with generate the p values # g1 and g2 are both (Node, Node, Subject) in size. # The third input argument is the cluster threshold (set far too high here, but to ensure we just get the 2 extreme communities). p, adj, null = bct.nbs_bct(g1, g2, 4, seed=2022) [3] 2022-06-21 10:30:19 ( 11.0ms ) python3 ( 2.18s ) NameError: name 'bct' is not defined NameError Traceback (most recent call last) Input In [22], in <cell line: 3>() 1 # g1 and g2 are both (Node, Node, Subject) in size. 2 # The third input argument is the cluster threshold (set far too high here, but to ensure we just get the 2 extreme communities). ----> 3 p, adj, null = bct.nbs_bct(g1, g2, 4, seed=2022) Let us now visualize the data we have created. Here we see the correlation matrices and the 2 significant clusters created. fig, ax = plt.subplots(1, 3) ax[0].imshow(np.mean(g1, axis=-1), cmap='RdBu_r', vmin=-0.5, vmax=0.5) ax[0].set_title('Group 1 (mean)') ax[1].imshow(np.mean(g2, axis=-1), cmap='RdBu_r', vmin=-0.5, vmax=0.5) ax[1].set_title('Group 2 (mean)') ax[2].imshow(adj, cmap='binary') ax[2].set_title('Significant Clusters') [4] ( ) ( ) Plotting in netplotbrain We will assume that are 100 random nodes correspond to the Schaefer 2018 atlas with 100 parcels. With this information, we can call netplotbrain. # For out edges let's plot the group different. gdif = np.mean(g2,axis=-1) - np.mean(g1,axis=-1) fig, ax = netplotbrain.plot(template='MNI152NLin2009cAsym', nodes={'atlas': 'Schaefer2018', 'desc': '100Parcels7Networks', 'resolution': 1}, edges=gdif, highlightedges=adj, templatestyle='glass', view=['LSR'], title=['', 'NBS integration', ''], nodetype='circles', highlightlevel=0.5) [5] 2022-06-21 10:30:19 ( 13.0ms ) python3 ( 2.19s ) NameError: name 'np' is not defined NameError Traceback (most recent call last) Input In [23], in <cell line: 2>() 1 # For out edges let's plot the group different. ----> 2 gdif = np.mean(g2,axis=-1) - np.mean(g1,axis=-1) 4 fig, ax = netplotbrain.plot(template='MNI152NLin2009cAsym', 5 nodes={'atlas': 'Schaefer2018', 6 'desc': '100Parcels7Networks', (...) 13 nodetype='circles', 14 highlightlevel=0.5) The amount of highlight is governed by the highlightlevel argument. Increasing it highlights the significant edges more.","title":"Nbs"},{"location":"gallary/nbs/#plotting-significant-results-from-network-based-statistics","text":"Netplotbrain aims to try and integrate with other tools, minimizing the work needed. For this we are going to use bctpy's implementation of network based statistics. import bct import numpy as np import matplotlib.pyplot as plt import netplotbrain [1] 2022-06-21 10:30:19 ( 12.8ms ) python3 ( 2.14s ) ModuleNotFoundError: No module named 'bct' ModuleNotFoundError Traceback (most recent call last) Input In [20], in <cell line: 1>() ----> 1 import bct 2 import numpy as np 3 import matplotlib.pyplot as plt","title":"Plotting significant results from network based statistics"},{"location":"gallary/nbs/#generating-the-data","text":"To run NBS statistics we need connectivity matrices for multiple subjects. The data we will need is a N x N x S array for two separate groups, where N is the number of nodes and S is the number of subjects. In this subsection we will create dummy data to simulate the point. Skip to the next subsection if you just want to see how netplotbrain integrates with NBS statistics. We are going to create connectivity matrices with 100 nodes for 50 subjects. The 100 nodes will be split into 6 communities of varying sizes. Edge weights will be sampled from a normal distribution with the standard deviation set to 0.25. The mean of the normal distribution for each edge varies. For between-community edges the mean is set to 0. For within community edges each community is set to a different value. This value will differ between the two groups. def generate_group_cm(nodes, subjects, community_size, community_str, scale=0.25, seed=2022): \"\"\" Quick way to simulate group differences for visualization purposes. Input ----- nodes : int number of nodes subjects : int number of subjects community_size : list list of number of nodes in each community community_str : list list of mean str for within community connections scale : float scale (STD) of normal distribution. \"\"\" np.random.seed(seed) mu = np.zeros([nodes, nodes, 1]) np.fill_diagonal(mu[:, :, 0], 1) ci = 0 for i, c in enumerate(community_size): mu[ci:ci+c, ci:ci+c, :] = community_str[i] ci += c # Simulate data g = np.random.normal(mu, scale, size=[nodes, nodes, subjects]) # Force to be symmetric ind_i, ind_j = np.triu_indices(g.shape[0], k=1) g[ind_j, ind_i] = g[ind_i, ind_j] return g # Specify variable for generating data nodes = 100 subjects_per_group = 50 community_size = [13, 7, 35, 15, 20, 5] g1_community_str = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1] g2_community_str = [0.17, 0.7, 0.13, 0.1, 0.15, 0.6] g1 = generate_group_cm(nodes, subjects_per_group, community_size, g1_community_str) g2 = generate_group_cm(nodes, subjects_per_group, community_size, g2_community_str) [2] 2022-06-21 10:30:19 ( 23.4ms ) python3 ( 2.16s ) NameError: name 'np' is not defined NameError Traceback (most recent call last) Input In [21], in <cell line: 41>() 38 g1_community_str = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1] 39 g2_community_str = [0.17, 0.7, 0.13, 0.1, 0.15, 0.6] ---> 41 g1 = generate_group_cm(nodes, subjects_per_group, community_size, g1_community_str) 42 g2 = generate_group_cm(nodes, subjects_per_group, community_size, g2_community_str) Input In [21], in generate_group_cm(nodes, subjects, community_size, community_str, scale, seed) 1 def generate_group_cm(nodes, subjects, community_size, community_str, scale=0.25, seed=2022): 2 \"\"\" 3 Quick way to simulate group differences for visualization purposes. 4 (...) 16 scale (STD) of normal distribution. 17 \"\"\" ---> 18 np.random.seed(seed) 19 mu = np.zeros([nodes, nodes, 1]) 20 np.fill_diagonal(mu[:, :, 0], 1)","title":"Generating the data"},{"location":"gallary/nbs/#running-nbs-statistics","text":"From the generated data. Using the NBS implementation from bctpy with generate the p values # g1 and g2 are both (Node, Node, Subject) in size. # The third input argument is the cluster threshold (set far too high here, but to ensure we just get the 2 extreme communities). p, adj, null = bct.nbs_bct(g1, g2, 4, seed=2022) [3] 2022-06-21 10:30:19 ( 11.0ms ) python3 ( 2.18s ) NameError: name 'bct' is not defined NameError Traceback (most recent call last) Input In [22], in <cell line: 3>() 1 # g1 and g2 are both (Node, Node, Subject) in size. 2 # The third input argument is the cluster threshold (set far too high here, but to ensure we just get the 2 extreme communities). ----> 3 p, adj, null = bct.nbs_bct(g1, g2, 4, seed=2022) Let us now visualize the data we have created. Here we see the correlation matrices and the 2 significant clusters created. fig, ax = plt.subplots(1, 3) ax[0].imshow(np.mean(g1, axis=-1), cmap='RdBu_r', vmin=-0.5, vmax=0.5) ax[0].set_title('Group 1 (mean)') ax[1].imshow(np.mean(g2, axis=-1), cmap='RdBu_r', vmin=-0.5, vmax=0.5) ax[1].set_title('Group 2 (mean)') ax[2].imshow(adj, cmap='binary') ax[2].set_title('Significant Clusters') [4] ( ) ( )","title":"Running NBS statistics"},{"location":"gallary/nbs/#plotting-in-netplotbrain","text":"We will assume that are 100 random nodes correspond to the Schaefer 2018 atlas with 100 parcels. With this information, we can call netplotbrain. # For out edges let's plot the group different. gdif = np.mean(g2,axis=-1) - np.mean(g1,axis=-1) fig, ax = netplotbrain.plot(template='MNI152NLin2009cAsym', nodes={'atlas': 'Schaefer2018', 'desc': '100Parcels7Networks', 'resolution': 1}, edges=gdif, highlightedges=adj, templatestyle='glass', view=['LSR'], title=['', 'NBS integration', ''], nodetype='circles', highlightlevel=0.5) [5] 2022-06-21 10:30:19 ( 13.0ms ) python3 ( 2.19s ) NameError: name 'np' is not defined NameError Traceback (most recent call last) Input In [23], in <cell line: 2>() 1 # For out edges let's plot the group different. ----> 2 gdif = np.mean(g2,axis=-1) - np.mean(g1,axis=-1) 4 fig, ax = netplotbrain.plot(template='MNI152NLin2009cAsym', 5 nodes={'atlas': 'Schaefer2018', 6 'desc': '100Parcels7Networks', (...) 13 nodetype='circles', 14 highlightlevel=0.5) The amount of highlight is governed by the highlightlevel argument. Increasing it highlights the significant edges more.","title":"Plotting in netplotbrain"},{"location":"gallary/simple/","text":"Simple single view import netplotbrain import pandas as pd # Example node and edges dataframes included with package nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Plot single view netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view='LSR', nodes=nodes, nodescale=40, nodesize='centrality_measure1', edges=edges, nodecolor='community') [1] 2022-06-21 10:30:19 ( 49.7ms ) python3 ( 2.24s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [25], in <cell line: 1>() ----> 1 import netplotbrain 2 import pandas as pd 4 # Example node and edges dataframes included with package File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Simple"},{"location":"gallary/simple/#simple-single-view","text":"import netplotbrain import pandas as pd # Example node and edges dataframes included with package nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Plot single view netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', view='LSR', nodes=nodes, nodescale=40, nodesize='centrality_measure1', edges=edges, nodecolor='community') [1] 2022-06-21 10:30:19 ( 49.7ms ) python3 ( 2.24s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [25], in <cell line: 1>() ----> 1 import netplotbrain 2 import pandas as pd 4 # Example node and edges dataframes included with package File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Simple single view"},{"location":"gallary/two_rows/","text":"Figures over multiple rows # Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Plot figure netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', nodes=nodes, nodesize='centrality_measure1', edges=edges, nodecolor='community', view=['LSR', 'AIP'], frames=2) [1] 2022-06-21 10:30:19 ( 50.2ms ) python3 ( 2.29s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [27], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Two rows"},{"location":"gallary/two_rows/#figures-over-multiple-rows","text":"# Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Plot figure netplotbrain.plot(template='MNI152NLin2009cAsym', templatestyle='surface', nodes=nodes, nodesize='centrality_measure1', edges=edges, nodecolor='community', view=['LSR', 'AIP'], frames=2) [1] 2022-06-21 10:30:19 ( 50.2ms ) python3 ( 2.29s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [27], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Figures over multiple rows"},{"location":"gallary/whs/","text":"Template from TemplateFlow: WHS # Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Rescale example node data to fit template nodes_whs = nodes.copy() nodes_whs['x'] = nodes_whs['x'] / 8 nodes_whs['y'] = nodes_whs['y'] / 8 nodes_whs['z'] = nodes_whs['z'] / 8 # Plot figure netplotbrain.plot(template='WHS', templatestyle='surface', title='Multiple templates possible', view='LSR', nodes=nodes_whs, nodesize='centrality_measure1', edges=edges, nodecolor='community', nodescale=80, templatevoxsize=0.2) [1] 2022-06-21 10:30:19 ( 51.3ms ) python3 ( 2.35s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [29], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Whs"},{"location":"gallary/whs/#template-from-templateflow-whs","text":"# Import packages import netplotbrain import pandas as pd # Load example data nodes = pd.read_csv('./example_nodes.tsv', sep='\\t', index_col=0) edges = pd.read_csv('./example_edges.tsv', sep='\\t', index_col=0) # Rescale example node data to fit template nodes_whs = nodes.copy() nodes_whs['x'] = nodes_whs['x'] / 8 nodes_whs['y'] = nodes_whs['y'] / 8 nodes_whs['z'] = nodes_whs['z'] / 8 # Plot figure netplotbrain.plot(template='WHS', templatestyle='surface', title='Multiple templates possible', view='LSR', nodes=nodes_whs, nodesize='centrality_measure1', edges=edges, nodecolor='community', nodescale=80, templatevoxsize=0.2) [1] 2022-06-21 10:30:19 ( 51.3ms ) python3 ( 2.35s ) ModuleNotFoundError: No module named 'nibabel' ModuleNotFoundError Traceback (most recent call last) Input In [29], in <cell line: 2>() 1 # Import packages ----> 2 import netplotbrain 3 import pandas as pd 5 # Load example data File ~/packages/netplotbrain/netplotbrain/__init__.py:6, in <module> 1 \"\"\" 2 .. include:: ../README.md 3 4 .. include:: ../docs/gallary.md 5 \"\"\" ----> 6 from .plot import plot 8 __all__ = ['plot'] 9 __pdoc__ = { 10 \"plotting\": False, 11 \"utils\": False, 12 \"templatesettings\": False, 13 } File ~/packages/netplotbrain/netplotbrain/plot.py:4, in <module> 2 from typing import Optional 3 import matplotlib.pyplot as plt ----> 4 from .plotting import _plot_template, \\ 5 _plot_edges, _plot_nodes, _plot_spheres,\\ 6 _scale_nodes, _add_axis_arrows, _plot_parcels,\\ 7 _select_single_hemisphere_nodes, _add_subplot_title, get_frame_input,\\ 8 _setup_legend, _process_edge_input, _process_node_input,\\ 9 _add_nodesize_legend, _add_nodecolor_legend, _init_figure, _check_axinput, \\ 10 _plot_gif, _npedges2dfedges 11 from .utils import _highlight_nodes, _get_colorby_colors, _set_axes_equal, _get_view, \\ 12 _load_profile, _nrows_in_fig, _highlight_edges 14 def plot(nodes=None, fig: Optional[plt.Figure] = None, ax=None, view: str = 'L', frames=None, edges=None, template=None, templatestyle='filled', 15 arrowaxis='auto', arroworigin=None, edgecolor='k', nodesize=1, nodecolor='salmon', nodetype='circles', 16 nodecmap='Dark2', edgecmap='Set2', edgeweights=None, nodes_df=None, hemisphere='both', title='auto', highlightnodes=None, highlightedges=None, showlegend=True, **kwargs): File ~/packages/netplotbrain/netplotbrain/plotting/__init__.py:5, in <module> 3 from .plot_nodes import _scale_nodes, _plot_nodes, _select_single_hemisphere_nodes 4 from .plot_spheres import _plot_spheres ----> 5 from .plot_templates import _plot_template, _plot_template_style_filled, \\ 6 _plot_template_style_cloudy, _plot_template_style_surface 7 from .plot_dimarrows import _add_axis_arrows 8 from .plot_parcels import _get_nodes_from_nii, _plot_parcels File ~/packages/netplotbrain/netplotbrain/plotting/plot_templates.py:2, in <module> 1 import numpy as np ----> 2 import nibabel as nib 3 import os 4 import templateflow.api as tf","title":"Template from TemplateFlow: WHS"}]}